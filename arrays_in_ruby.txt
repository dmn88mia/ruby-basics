Introduction to Arrays:
=======================

Empty arrays:
-------------

It is easier than you think.
There is a [] typed into the code editor already. This is how you create an array.

Example Code:

[]
 
You can also do the same thing by Array.new.

Example Code:

Array.new

Building arrays:
----------------

You can create an array with a set of values by simply placing them inside [] like
this: [1, 2, 3]. Try this out by creating an array with the numbers 1 through 5, inclusive.

 
[1,2,3,4,5]

Looking up data in Arrays:
--------------------------

Looking up values within an array is easily done using an index. Like most languages,
arrays in Ruby have indexes starting from 0. The example below demonstrates how to look
up the third value in an array.

Example Code:

[1, 2, 3, 4, 5][2]


Array indexes can also start from the end of the array, rather than the beginning! 
In Ruby, this is achieved by using negative numbers. This is called reverse index lookup.
In this case, the values of the index start at -1 and become smaller. The example below 
returns the first value in the array.

Example Code:

[1, 2, 3, 4, 5][-5]

Growing arrays:
---------------

In Ruby, the size of an array is not fixed. Also, any object of any type can be added
to an array, not just numbers. How about appending the String "woot" to an array? 
Try using << - that's the 'append' function - to add it to the array below.

 
[1, 2, 3, 4, 5] << "woot"

Output: [1, 2, 3, 4, 5, "woot"]

Unlike many other languages, you will always find multiple ways to perform the same action
in Ruby. To append a new element to a given array, you can also use push method on an array.
Add the string "woot" to given array by calling push.

 
[1, 2, 3, 4, 5].push("woot")

Output: [1, 2, 3, 4, 5, "woot"]

Using '<<' is the most common method to add an element to an Array. There are other ways as well,
but we will touch upon them later.


Basic Array Operations:
=======================

Transforming arrays:
--------------------

Now on to more interesting things, but with a little tip from me first. Try running this:

Example Code:

[1, 2, 3, 4, 5].map { |i| i + 1 }

STDOUT: [2, 3, 4, 5, 6]

In Ruby, the method map is used to transform the contents of an array according to a specified
set of rules defined inside the code block. Go on, you try it. Multiply every element in the 
array below by 3 to get [3, 6 .. 15].
 
[1, 2, 3, 4, 5].map {|i| i * 3}

STDOUT: [3, 6, 9, 12, 15]

Filtering elements of an Array:
-------------------------------

Filtering elements in a collection according to a boolean expression is a very common operation
in day-to-day programming. Ruby provides the rather handy select method to make this easy.

Example Code:

# select even numbers
[1,2,3,4,5,6].select {|number| number % 2 == 0}

The method select is the standard Ruby idiom for filtering elements.

names = ['rock', 'paper', 'scissors', 'lizard', 'spock']
names.select {|word| word.length

STDOUT: ["scissors", "lizard"]

Deleting elements:
------------------

One of the reasons Ruby is so popular with developers is the intuitiveness of the API.
Most of the time you can guess the method name which will perform the task you have in your mind.
Try guessing the method you need to use to delete the element '5' from the array given below:

 
[1,3,5,4,6,7].delete(5)
 
I guess that was easy. What if you want to delete all the elements less than 4 from the given array.
The example below does just that:

Example Code:

[1,2,3,4,5,6,7].delete_if{|i| i < 4 }

You'll notice that Ruby methods with multiple words are separated by underscores (_).
This convention is called "snake_casing" because a_longer_method_looks_kind_of_like_a_snake.

Okay! Hands-on time. Delete all the even numbers from the array given below.

 [1,2,3,4,5,6,7,8,9].delete_if {|i| i.even?}

Iteration:
==========

Got `for` loops?:
-----------------

Ruby, like most languages, has the all-time favourite for loop. Interestingly, 
nobody uses it much - but let's leave the alternatives for the next exercise. 
Here's how you use a for loop in Ruby. Just run the code below to print all the values in the array.

Example Code:

array = [1, 2, 3, 4, 5]
for i in array
  puts i
end

STDOUT:

1
2
3
4
5

looping with `each`:
--------------------

Iteration is one of the most commonly cited examples of the usage of blocks in Ruby.
The Array#each method accepts a block to which each element of the array is passed in turn.
You will find that for loops are hardly ever used in Ruby, and Array#each and its siblings 
are the de-facto standard. We'll go into the relative merits of using each over for loops a
little later once you've had some time to get familiar with it. Let's look at an example that
prints all the values in an array.

Example Code:

array = [1, 2, 3, 4, 5]
array.each do |i|
  puts i
end

STDOUT:

1
2
3
4
5
